//
// zooNameSpacey
//
// Created by Hamish McKenzie mel@mel.macaronikazoo.com
// Created : 07 October 2003
//
// Description:
// helps management of name spaces within a scene
//
// Hamish McKenzie ©2004...
// macaroniKazoo Productions ©2004...
// merge function util to this file

global proc zooNameSpacey() {
	string $windowName = "zooNameSpaceyWindow";
	string $windowTitle = "zooNameSpacey v" + `zooNameSpaceyInfo version` + "   -:macaroniKazoo:-";

	//source all dependencies
	string $deps[] = `zooNameSpaceyDependencies -scripts`;
	for( $script in $deps ) if( `exists $script` ) eval( "source " + $script );

	if ( `window -exists $windowName` ) deleteUI $windowName;

	window -title $windowTitle -resizeToFitChildren 1 -maximizeButton 0 -sizeable 1 -widthHeight 320 190 $windowName;
		scriptJob -p $windowName -e "SceneOpened" "zooNameSpaceyWindowFunctions -update";
		menuBarLayout;
			menu -label "Help";
				menuItem -l "Help..." -c ( "zooNameSpaceyHelp help" );
				menuItem -divider 1;
				menuItem -l "About" -c ( "zooNameSpaceyHelp about" );

				formLayout zooNameSpaceyForm;
					columnLayout -columnWidth 115 -columnAttach both 2 zooNameSpaceyColumnButtons;
						button -l "select members" -height 20 -c ( "zooNameSpaceyWindowFunctions -select" );
						button -l "remove namespace" -height 20 -c ( "zooNameSpaceyWindowFunctions -remove" );
						button -l "delete namespace" -height 20 -c ( "zooNameSpaceyWindowFunctions -delete" );

						text -l "";
						text -l "current namespace:";
						textField -ed 0 zooNameSpaceyTextCurrent;
						setParent..;

					text -l "rename:" zooNameSpaceyTextRenameLabel;
					textScrollList -numberOfRows 8 -allowMultiSelection 0 -sc ( "zooNameSpaceyWindowFunctions -updateSpace" ) -dcc ( "zooNameSpaceyWindowFunctions -makeCurrent" ) zooNameSpaceyScrollSpaces;

					textField -cc ( "zooNameSpaceyWindowFunctions -rename" ) zooNameSpaceyTextName;

					string $image = `image -width 328 -height 8 -backgroundColor ((float)96/255) ((float)100/255) ((float)146/255) -image ( internalVar("-userBitmapsDir") + "/zoo_sig.tga" ) zooNameSpaceyImageSig`;
					popupMenu -p $image -b 1 -pmc ( "showHelp -a \"http://www.macaronikazoo.com/mel\"" );
					setParent..;

	 formLayout -edit
		-attachForm zooNameSpaceyColumnButtons "top" 2
		-attachForm zooNameSpaceyColumnButtons "left" 2
		-attachNone zooNameSpaceyColumnButtons "right"
		-attachControl zooNameSpaceyColumnButtons "bottom" 2 zooNameSpaceyTextName

		-attachForm zooNameSpaceyScrollSpaces "top" 2
		-attachControl zooNameSpaceyScrollSpaces "left" 2 zooNameSpaceyColumnButtons
		-attachForm zooNameSpaceyScrollSpaces "right" 2
		-attachControl zooNameSpaceyScrollSpaces "bottom" 2 zooNameSpaceyTextName

		-attachNone zooNameSpaceyTextRenameLabel "top"
		-attachForm zooNameSpaceyTextRenameLabel "left" 2
		-attachNone zooNameSpaceyTextRenameLabel "right"
		-attachControl zooNameSpaceyTextRenameLabel "bottom" 5 zooNameSpaceyImageSig

		-attachNone zooNameSpaceyTextName "top"
		-attachControl zooNameSpaceyTextName "left" 2 zooNameSpaceyTextRenameLabel
		-attachForm zooNameSpaceyTextName "right" 2
		-attachControl zooNameSpaceyTextName "bottom" 2 zooNameSpaceyImageSig

		-attachNone zooNameSpaceyImageSig "top"
		-attachForm zooNameSpaceyImageSig "left" 2
		-attachForm zooNameSpaceyImageSig "right" 2
		-attachForm zooNameSpaceyImageSig "bottom" 2
		zooNameSpaceyForm;

	showWindow $windowName;
	zooNameSpaceyWindowFunctions -update;
	}


global proc zooNameSpaceyWindowFunctions( string $function ) {
	string $selectedNameSpace[] = `textScrollList -q -si zooNameSpaceyScrollSpaces`;
	switch( $function ) {
		case "-u":
		case "-update":
		string $nameSpaces[] = `namespaceInfo -lon`;
		textScrollList -e -removeAll zooNameSpaceyScrollSpaces;
		textScrollList -e -append "Root" zooNameSpaceyScrollSpaces;
		textScrollList -e -append ".." zooNameSpaceyScrollSpaces;
		for( $space in $nameSpaces ) if( $space != "UI" ) textScrollList -e -append $space zooNameSpaceyScrollSpaces;

		zooNameSpaceyWindowFunctions -updateSpace;
		break;


		case "-us":
		case "-updateSpace":
		textField -e -tx ( `namespaceInfo -cur`==":"?"Root":`namespaceInfo -cur` ) zooNameSpaceyTextCurrent;
		break;


		case "-r":
		case "-rename":
		if( $selectedNameSpace[0] != "Root" && $selectedNameSpace[0] != ".." ) {
			string $newName = `textField -q -tx zooNameSpaceyTextName`;
			zooNameSpaceyRename $selectedNameSpace[0] $newName;
			zooNameSpaceyWindowFunctions -update;
			}
		break;


		case "-s":
		case "-select":
		if( $selectedNameSpace[0] != "Root" && $selectedNameSpace[0] != ".." ) select `ls ( ":" + $selectedNameSpace[0] + ":*" )`;
		break;


		case "-mc":
		case "-makeCurrent":
		string $prefix = `namespaceInfo -cur`;
		if( $selectedNameSpace[0] == "Root" ) namespace -set ":";
		else if( $selectedNameSpace[0] == ".." ) namespace -set ( ":" + `namespaceInfo -parent` );
		else namespace -set ( ":" + $selectedNameSpace[0] );
		zooNameSpaceyWindowFunctions -update;
		break;


		case "-rem":
		case "-remove":
		zooNameSpaceyFunctions -rem $selectedNameSpace[0];
		zooNameSpaceyWindowFunctions -update;
		break;


		case "-d":
		case "-delete":
		if( `confirmDialog -title "Confirm" -message "This will delete ALL objects in the namespace" -button "Do it!" -button "No" -defaultButton "No" -cancelButton "No" -dismissString "No"` != "No" ) zooNameSpaceyFunctions -delete $selectedNameSpace[0];
		zooNameSpaceyWindowFunctions -update;
		break;
		}
	}


//this proc has to recurse through all sub spaces, rename all subspaces, as well as their contents, then remove the original space
global proc zooNameSpaceyRename( string $space, string $newName ) {
	if( $space == $newName ) error( "You must specify a different name" );
	if( $space != "Root" && $space != ".." ) {
		string $subSpaces[] = `zooNameSpaceyGetRecursedSpaces $space`;
		string $buffer[];
		string $contents[] = `ls ( $space + ":*" )`;

		namespace -set ":";
		namespace -p ":" -add $newName;

		for( $sub in $subSpaces ) {
			string $cmd = "namespace -p " + $newName;  //setup the command to create the duplicate subspace in the new namespace
			string $newSubSpace = $newName;  //create a variable to hold the name of the new subspace
			int $n = 0;

			$numToks = `tokenize $sub ":" $buffer`;
			for( $n = 1; $n < `size $buffer`-1; $n++ ) $cmd = $cmd + ":" + $buffer[$n];
			for( $n = 1; $n < `size $buffer`; $n++ ) $newSubSpace = $newSubSpace + ":" + $buffer[$n];
			$cmd = $cmd + " -add " + $buffer[( `size $buffer`-1 )];
			if( $sub != $space ) eval $cmd;

			select -r -ne `ls -l ( ":" + $sub + ":*" )`;
			while( size( `ls -sl` )) {
				string $obj[] = `ls -l -sl`;
				select -d -ne $obj[0];

				clear $buffer;
				int $numToks = `tokenize $obj[0] ":" $buffer`;
				rename $obj[0] ( $newSubSpace + ":" + $buffer[( `size $buffer`-1 )] );
				}
			}

		namespace -set ":";
		zooNameSpaceyFunctions -delete $space;
		}
	}


//this is where most of the work is actually done
global proc zooNameSpaceyFunctions( string $function, string $space ) {
	switch( $function ) {
		case "-rem":
		case "-remove":
		string $buffer[];
		string $parentSpace = `zooNameSpaceyNavigate -up $space`;
		string $prefixSpace = $parentSpace == ""? "": $parentSpace+":";
		string $subSpaces[] = `zooNameSpaceyGetRecursedSpaces $space`;

		namespace -set ( ":" + $parentSpace );
		$subSpaces = `zooUtilsReverseArray $subSpaces`;
		for( $sub in $subSpaces ) {
			select -r -ne `ls -l ( ":" + $sub + ":*" )`;
			while( size( `ls -sl` )) {
				string $obj[] = `ls -l -sl`;
				select -d -ne $obj[0];

				clear $buffer;
				int $numToks = `tokenize $obj[0] ":" $buffer`;
				rename $obj[0] ( $prefixSpace + $buffer[( $numToks-1 )] );
				}

			catch( `namespace -removeNamespace ( ":" + $sub )` );
			}

		namespace -set ( ":" + $parentSpace );
		break;


		case "-d":
		case "-delete":
		/*
		string $subSpaces[] = zooUtilsReverseArray( `zooNameSpaceyGetRecursedSpaces $space` );
		for( $sub in $subSpaces ) {
			if( size(`ls ( ":" + $sub + ":*" )`)) delete ( ":" + $sub + ":*" );
			namespace -removeNamespace ( ":" + $sub );
			}

		namespace -set ":";
		break;*/
		}
	}


global proc string zooNameSpaceyNavigate( string $direction, string $space ) {
	string $buffer[];
	string $recursedSpace = "";
	int $tokens = `tokenize $space ":" $buffer`;
	int $n = 0;

	if( `size $buffer` > 1 ) for( $n = 0; $n < `size $buffer`-1; $n++ ) $recursedSpace = $recursedSpace + $buffer[$n] + ":";
	else $recursedSpace = "";
	if( $recursedSpace == "" ) $recursedSpace = "";
	else $recursedSpace = `substring $recursedSpace 1 (size($recursedSpace)-1)`;
	return $recursedSpace;
	}


//this proc transverses the namespace heirarchy, and returns an ordered list of namespaces.  Top most namespaces are listed first
global proc string[] zooNameSpaceyGetRecursedSpaces( string $space ) {
	string $pathsFound[];
	string $temp[];
	int $n = 0;

	$pathsFound[0] = $space;
	for( $n = 0; $n < `size $pathsFound`; $n++ ) {
		$path = $pathsFound[$n];
		namespace -set ( ":" + $path );
		clear $temp;
		$temp = `namespaceInfo -lon`;
		if( `size $temp` ) $pathsFound = `zooUtilsAddArray $pathsFound $temp`;
		if( $n>1000 ) break;
		}

	return $pathsFound;
	}


global proc zooNameSpaceyHelp ( string $function ) {
	string $windowName = "zooNameSpaceyAbout";
	string $windowTitle = "About zooNameSpacey v" + `zooNameSpaceyInfo version` + "   -:macaroniKazoo:-";
	string $aboutScript = "Overview:\nzooNameSpacey helps manage namespaces in a somewhat more friendly way than maya offers.\n\nAll it does at the moment is offer navigation, renaming, and deletion tools.\n\nNavigating:\nDouble clicking a namespace will allow you to \"look\" into that namespace (kinda like a directory) to see if it has any sub-namespaces.  This also changes the default namespace in maya.  ie any new objects created get stuck into this default namespace.\n\nRenaming:\nTo rename a namespace, simply select it, and type in a new name at the bottom, and hit enter.  The script handles renaming all sub spaces accordingly.\n\nRemove and Delete:\nRemove will remove the namespace, and dump all its contents (including anything in sub spaces) into its parent's namespace.  Delete will actually delete all contents of a namespace (including sub spaces) as well as removing the namespace itself.";
	string $aboutAuthor = "Version: " + `zooNameSpaceyInfo version` + "\nCreation Date: " + `zooNameSpaceyInfo created` + "\nLast Modified: " + `zooNameSpaceyInfo modified` + "\n\nScript Loader was written by Macaroni Kazoo Productions  www.macaronikazoo.com\n\n" + `zooNameSpaceyInfo history`;
	int $selTab = ( $function == "about" )?2:1;

	if ( `window -exists $windowName` ) deleteUI $windowName;

	window -title $windowTitle -resizeToFitChildren 1 -maximizeButton 0 -sizeable 1 -widthHeight 330 350 $windowName;

		 string $form = `formLayout`;
		 string $tabs = `tabLayout -innerMarginWidth 5 -innerMarginHeight 5`;
		 string $image = `image -p $form -width 300 -height 8 -backgroundColor ((float)96/255) ((float)100/255) ((float)146/255) -image ( internalVar("-userBitmapsDir") + "/zoo_sig.tga" )`;
		 formLayout -edit
			-attachForm $tabs "top" 0
			-attachForm $tabs "left" 0
			-attachForm $tabs "right" 0
			-attachControl $tabs "bottom" 2 $image

			-attachNone $image "top"
			-attachForm $image "left" 0
			-attachForm $image "right" 0
			-attachForm $image "bottom" 0
			$form;

			string $child1 = `paneLayout -configuration "single"`;
				scrollField -ed 0 -wordWrap 1 -font plainLabelFont -w 300 -h 200 -numberOfLines 15 -text $aboutScript;
				setParent ..;

			string $child2 = `paneLayout -configuration "single"`;
				scrollField -ed 0 -wordWrap 1 -font plainLabelFont -w 300 -h 200 -numberOfLines 15 -text $aboutAuthor;
				setParent ..;

			tabLayout -e -selectTabIndex $selTab -tabLabel $child1 "zooNameSpacey Help" -tabLabel $child2 "About zooNameSpacey" $tabs;

	popupMenu -p $image -b 1 -pmc ( "showHelp -a \"http://www.macaronikazoo.com/mel\"" );
	showWindow $windowName;
	}


global proc string zooNameSpaceyInfo ( string $function ) {
	string $creationDate = "07 October 2003";
	string $lastRevision = "27 February 2004";
	string $revisionHistory = "v1.05  27-11-04\nFIX: renames all namespace members the first time - no longer do you have to hit remove 57 times to get rid of namespaces with lots of members\n\nv1.04  11-02-04\nFIX: fixed a fairly major bug that caused the script to hang maya\n\nv1.03  14-01-04\nMEL: ported a few functions into the zooUtils script\n\nv1.02  13-10-03\nFIX: bug when removing top level namespaces.  i'm not sure how i missed this bug, but there ya go...\n\nv1.01  08-10-03\nFIX: yeah!  namespace recursion is in.  This means that the script will build a heirarchy of nested namespaces when doing functions.  The rename function doesn't yet take advantage of this.\n\nv1.0  07-10-03\nNEW: Initial version.  Hopefully recursive namespace deletion will be the next improvement...";
	string $info = "";
	float $currentVersion = 1.05;

	if ( $function == "created" ) $info = $creationDate;
	if ( $function == "modified" ) $info = $lastRevision;
	if ( $function == "history" ) $info = $revisionHistory;
	if ( $function == "version" ) $info = $currentVersion;
	return $info;
	}


//these dependencies allow the zooZipScript to package this script easily for distribution
global proc string[] zooNameSpaceyDependencies( string $mode ) {
	string $melDependencies[];
	string $iconDependencies[];

	$melDependencies[( `size $melDependencies` )] = "zooUtils";
	$iconDependencies[( `size $iconDependencies` )] = "zoo_sig.tga";

	if( $mode == "-scripts" ) return $melDependencies;
	if( $mode == "-icons" ) return $iconDependencies;
	}

//this script is a collection of commonly used functions


/*
super simple, returns the first entry in an array.

this is useful for commands that only return a single string, but return an array
example: string $constraint = zooUtilsReturnElement( 0,`parentConstraint -mo $obj2 $obj1` );
example: string $parent = zooUtilsReturnElement( 0,`listRelatives -p $obj2` );
*/
global proc string zooUtilsReturnElement( int $entry, string $array[] ) {
	if( $entry<0 ) $entry = `size $array` + $entry;
	return $array[$entry];
	}


//removes duplicate entries from a string array
global proc string[] zooUtilsRemoveDupeArrayItems_string( string $array[] ) {
	string $returnArray[];
	string $prevVal = $array[0];

	$returnArray[0] = $array[0];
	for( $n = 1; $n < `size $array`; $n++ ) {
		if( $prevVal != $array[$n] ) $returnArray[( `size $returnArray` )] = $array[$n];
		$prevVal = $array[$n];
		}

	return $returnArray;
	}


//removes duplicate entries from a float array
global proc float[] zooUtilsRemoveDupeArrayItems_float( float $array[] ) {
	float $returnArray[];
	float $prevVal = $array[0];

	$returnArray[0] = $array[0];
	for( $n = 1; $n < `size $array`; $n++ ) {
		if( $prevVal != $array[$n] ) $returnArray[( `size $returnArray` )] = $array[$n];
		$prevVal = $array[$n];
		}

	return $returnArray;
	}


//adds array2 to the end of array1
global proc string[] zooUtilsAddArray( string $array1[], string $array2[] ) {
	for( $entry in $array2 ) $array1[( `size $array1` )] = $entry;
	return $array1;
	}


//subtracts array 2 from array 1
global proc string[] zooUtilsSubtractArray( string $array1[], string $array2[] ) {
	string $returnArray[];
	for( $entry1 in $array1 ){
		int $isInArray = 0;
		for( $entry2 in $array2 ){
			if( $entry1 == $entry2 ) $isInArray = 1;
			}
		if( !$isInArray ) $returnArray[( `size $returnArray` )] = $entry1;
		}
	return $returnArray;
	}


//reverses the order of an array
global proc string[] zooUtilsReverseArray( string $array[] ){
	string $reversedArray[];
	int $arraySize = `size $array`;

	for( $n = 0; $n < $arraySize; $n++ ) $reversedArray[( $arraySize - 1 - $n )] = $array[$n];
	return $reversedArray;
	}


//takes an array, and a max and min value and returns a cropped array - ie all values in the returned array lie inclusively between the max and min values
global proc float[] zooUtilsCropArray( float $array[], float $min, float $max ) {
	float $cropped[];
	for( $entry in $array ) if( $entry >= $min && $entry <= $max ) $cropped[( `size $cropped` )] = $entry;
	return $cropped;
	}


/*
takes an array of entries (as in array indicies), and shifts them in the direction specified.
------------

example: zooUtilsReorderArray { "a,"b","c","d","e" } {3,4} up
produces the resulting array:  { a,c,d,b,e }

example: zooUtilsReorderArray { "a,"b","c","d","e" } {1,2,5} up
produces the resulting array:  { b,c,e,d,a }
*/
global proc string[] zooUtilsArrayReorder( string $array[], int $entries[], string $dir ) {
	string $newArray[] = $array;
	int $gaps[];
	int $be;

	$entries = `sort $entries`;
	$gaps[0] = $entries[0];
	for( $n = 0; $n < `size $entries`-1; $n++ ) if( $entries[$n]+1 != $entries[( $n+1 )] ) {
		$gaps[( `size $gaps` )] = $entries[$n];
		$gaps[( `size $gaps` )] = $entries[( $n+1 )];
		}
	$gaps[( `size $gaps` )] = $entries[( `size $entries`-1 )];

	for( $n = 0; $n < `size $gaps`; $n+=2 ) if( $dir == "up" ) $newArray = `zooUtilsArrayShiftUp $newArray $gaps[$n] $gaps[( $n+1 )]`;
	for( $n = 0; $n < `size $gaps`; $n+=2 ) if( $dir == "down" ) $newArray = `zooUtilsArrayShiftDown $newArray $gaps[$n] $gaps[( $n+1 )]`;

	return $newArray;
	}


//shifts entries inclusive from the start index, to the end index up (ie towards zero) in an array
global proc string[] zooUtilsArrayShiftUp( string $array[], int $startIndex, int $endIndex ) {
	string $newArray[];
	int $displaced = $startIndex-1;
	int $num = ( $endIndex-$startIndex )+1;

	if( $startIndex == 0 ) return $array;

	//copy the original array to the newArray variable
	for( $n = 0; $n < `size $array`; $n++ ) $newArray[$n] = $array[$n];

	int $i = $startIndex-1;
	for( $n = 0; $n < $num; $n++, $i++) $newArray[$i] = $array[( $i+1 )];

	$newArray[$endIndex] = $array[$displaced];
	return $newArray;
	}


//shifts entries inclusive from the start index, to the end index down (ie away from zero) in an array
global proc string[] zooUtilsArrayShiftDown( string $array[], int $startIndex, int $endIndex ) {
	string $newArray[];
	int $displaced = $endIndex+1;
	int $num = ( $endIndex-$startIndex )+1;

	if( $endIndex >= `size $array` ) return $array;

	//copy the original array to the newArray variable
	for( $n = 0; $n < `size $array`; $n++ ) $newArray[$n] = $array[$n];

	int $i = $startIndex+$num;
	for( $n = 0; $n < $num; $i--, $n++ ) $newArray[$i] = $array[( $i-1 )];

	$newArray[$startIndex] = $array[$displaced];
	return $newArray;
	}


//takes a full path name for an object, and returns an array containing the path, and then the object name
global proc string[] zooUtilsObjFromPath( string $objPath ) {
	string $path = "";
	string $obj = "";
	string $buffer[];
	int $numToks = `tokenize $objPath "|" $buffer`;

	for( $n = 0; $n < $numToks-1; $n++ ) $path = $path + $buffer[$n] + "|";
	$obj = $buffer[( $numToks-1 )];

	return { $path, $obj };
	}


//simply returns the object name of an attribute path.  ie, `zooBodgeKReturnObjName "pSphere1.translateX"`;  returns pSphere1
global proc string zooUtilsReturnObjName( string $attributePath ) {
	string $buffer[];
	tokenize $attributePath "." $buffer;
	return $buffer[0];
	}


//returns a list of immediate children directories under the given directory
global proc string[] zooUtilsGetSubDirs( string $path ){
	string $files[] = `getFileList -folder $path`;
	string $dirs[];

	for( $file in $files ) if( `filetest -d ( $path + $file )` ) $dirs[( `size $dirs` )] = $file;

	return $dirs;
	}


//returns ALL sub directories under a given directory
global proc string[] zooUtilsGetRecursedSubDirs( string $path ) {
	string $pathsFound[];

	$pathsFound[0] = $path;
	for( $n=0; $n<`size $pathsFound`; $n++ ) {
		string $temp[];

		$searchPath = $pathsFound[$n];
		$temp = `zooUtilsGetSubDirs $searchPath`;

		for( $i=0; $i<`size $temp`; $i++ ) $temp[$i] = $searchPath + $temp[$i] + "/";
		if( `size $temp` ) $pathsFound = `zooUtilsAddArray $pathsFound $temp`;

		//just a safeguard
		if( $n >10000 ) {
			warning "has searched 10000 directories, aborting...";
			break;
			}
		}

	return $pathsFound;
	}


/*given a string, and a character to remove from that string, this proc returns the string with the characters removed
------------

example: zooUtilsReplaceString "10/02/04" "/" "";
returns the string "100204"
example: zooUtilsReplaceString "10Feb04" "[A-Za-z]+" "!";
returns the string "10!04"
*/
global proc string zooUtilsReplaceString( string $string, string $searchStr, string $replaceStr ){
	string $messageString = $string;
	string $temp = $messageString;
	int $stillChanging = 1;

	while( $stillChanging ) {
		$temp = `substitute $searchStr $messageString $replaceStr`;
		if( $messageString == $temp ) $stillChanging = 0;
		$messageString = $temp;
		}

	return $messageString;
	}


/*returns a path and a filename from a filepath
------------

example: zooUtilsSplitFilename "c:/temp/wowzers.txt"
returns "c:/temp/" "wowzers.txt"
*/
global proc string[] zooUtilsSplitFilename( string $filepath ) {
	string $path = "";
	string $filename = "";
	string $buffer[];

	tokenize $filepath "/" $buffer;
	for( $n=0; $n<`size $buffer`-1; $n++ ) $path += $buffer[$n] + "/";
	$filename = $buffer[( `size $buffer`-1 )];

	return { $path, $filename };
	}


global proc zooUNoUpdate( string $cmd ){
	string $activePanel = `getPanel -wf`;
	string $outlinerPanel = zooUtilsReturnElement(0,`getPanel -type outlinerPanel`);
	string $pbOption = `playbackOptions -q -v`;

	if( `getPanel -to $activePanel` != "modelPanel" ) return;
	string $camera = `modelPanel -q -cam $activePanel`;

	//switch update to single viewport only, and change current viewport to an outliner
	playbackOptions -v "active";print("now active!\n");
	outlinerPanel -e -rp $activePanel $outlinerPanel;

	//now run the command
	eval $cmd;

	//return the state
	modelPanel -e -cam $camera $activePanel;
	playbackOptions -v $pbOption;
	}


//zoo.end
//zoo.end